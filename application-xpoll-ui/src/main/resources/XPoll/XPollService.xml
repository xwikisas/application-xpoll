<?xml version="1.0" encoding="UTF-8"?>

<!--
 * See the NOTICE file distributed with this work for additional
 * information regarding copyright ownership.
 *
 * This is free software; you can redistribute it and/or modify it
 * under the terms of the GNU Lesser General Public License as
 * published by the Free Software Foundation; either version 2.1 of
 * the License, or (at your option) any later version.
 *
 * This software is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this software; if not, write to the Free
 * Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA
 * 02110-1301 USA, or see the FSF site: http://www.fsf.org.
-->

<xwikidoc version="1.3" reference="XPoll.XPollService" locale="">
  <web>XPoll</web>
  <name>XPollService</name>
  <language/>
  <defaultLanguage/>
  <translation>0</translation>
  <creator>xwiki:XWiki.Admin</creator>
  <creationDate>1325372400000</creationDate>
  <parent>AppWithinMinutes.WebHome</parent>
  <author>xwiki:XWiki.Admin</author>
  <contentAuthor>xwiki:XWiki.Admin</contentAuthor>
  <date>1538480793000</date>
  <contentUpdateDate>1538480793000</contentUpdateDate>
  <version>1.1</version>
  <title>Polls Service</title>
  <comment/>
  <minorEdit>false</minorEdit>
  <syntaxId>xwiki/2.1</syntaxId>
  <hidden>true</hidden>
  <content>{{groovy}}
try {
  if (!request.page) {
   println 'FAIL: no xpoll page provided';
  } else {
    def xpolldoc = xwiki.getDocument(request.page);
    synchronized (xpolldoc) {
      xpolldoc.use('XPoll.XPollClass');
      def status = xpolldoc.getValue('status');
      def proposals = xpolldoc.getValue('proposals');
      def votes = [];
      for (proposal in proposals) {
        if (request.get("${proposal.hashCode()}")) {
          votes.add(proposal);
        }
      }
      def voteobj = xpolldoc.getObject('XPoll.XPollVoteClass', 'user', xcontext.user, false);
      if (voteobj == null) {
        voteobj = xpolldoc.newObject('XPoll.XPollVoteClass');
      }
      xpolldoc.use(voteobj);
      xpolldoc.set('user', xcontext.user);
      xpolldoc.set('votes', votes);
      // find the new winners

      def voteCount = [:];
      for (proposal in proposals) {
        voteCount.put(proposal, 0);
      }
      def maxvote = 0;
      def currentWinners = [];
      def isProposal;
      for(obj in xpolldoc.getObjects('XPoll.XPollVoteClass')) {
        xpolldoc.use(obj);
        def currentvotes = xpolldoc.getValue('votes');
        for (vote in currentvotes) {
          isProposal = false;
          for (proposal in proposals) {
            if (vote == proposal) {
              isProposal = true;
              break;
            }
          }
          if (isProposal == true) {
            def nbvotes = voteCount.get(vote);
            nbvotes = nbvotes + 1;
            voteCount.put(vote, nbvotes);
            if (nbvotes == maxvote) {
              currentWinners.add(vote);
            } else if (nbvotes &gt; maxvote) {
              currentWinners = [];
              currentWinners.add(vote);
              maxvote = nbvotes;
            }
          }
        }
      }

     // update current winner
     xpolldoc.use('XPoll.XPollClass');
     xpolldoc.set('winner', currentWinners.join(','));

     // ready to save the vote results
     xwiki.getXWiki().saveDocument(xpolldoc.document, 'New vote', xcontext.context);
     println "OK ${votes.size()} votes - Winner ${currentWinners.join(',')}";
    }
  }
} catch (Throwable e) {
  e.printStackTrace();
  println """FAIL: exception ${e.message}""";
}
{{/groovy}}</content>
</xwikidoc>
